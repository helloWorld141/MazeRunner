net architecture: CNN (conv + max pooling + conv + max pooling + fully connected layer)
generations: 100
pool_size: 100
change fitness function: instruction_count component follow a normal distribution of (130, 43)
change evolve: pick top q3 for direct entry, range q1-q3 for cross over, bottom 0-q1 for mutate
normalize x,y or the robot according to the sensor data
feed the whole knowlwdge map into a CNN
Reduce fully connected layer to 25 nodes
Increase mutation rate from 0.15 to 0.5
Fix bugs in cross-over process
Increase contrast of the input image (values from 0-255: 0, 63, 127, 191, 255 for empty, unknown, obstacle, robot, robot nose)
Don’t focus on time first, let it train freely (remove the time factor in fitness score + increase runtimeout), after getting a good pool of models who can discover well, then train them to do faster

Train with 1 map first, then transfer to other maps
Restrict the number of possible actions so that one action is not reproducible by performing a combination of other actions multiple time -> only keep 2 actions: go straight or rotate right -> go back and rotate left can be reproduce by a number of primitive moves -> reduce duplication hence confusion for making decision
